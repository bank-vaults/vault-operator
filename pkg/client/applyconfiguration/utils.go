// Copyright Â© 2023 Bank-Vaults
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package applyconfiguration

import (
	v1alpha1 "github.com/bank-vaults/vault-operator/v2/pkg/apis/vault/v1alpha1"
	vaultv1alpha1 "github.com/bank-vaults/vault-operator/v2/pkg/client/applyconfiguration/vault/v1alpha1"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
)

// ForKind returns an apply configuration type for the given GroupVersionKind, or nil if no
// apply configuration type exists for the given GroupVersionKind.
func ForKind(kind schema.GroupVersionKind) interface{} {
	switch kind {
	// Group=vault.banzaicloud.com, Version=v1alpha1
	case v1alpha1.SchemeGroupVersion.WithKind("AlibabaUnsealConfig"):
		return &vaultv1alpha1.AlibabaUnsealConfigApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("AWSUnsealConfig"):
		return &vaultv1alpha1.AWSUnsealConfigApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("AzureUnsealConfig"):
		return &vaultv1alpha1.AzureUnsealConfigApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("CredentialsConfig"):
		return &vaultv1alpha1.CredentialsConfigApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("EmbeddedObjectMetadata"):
		return &vaultv1alpha1.EmbeddedObjectMetadataApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("EmbeddedPersistentVolumeClaim"):
		return &vaultv1alpha1.EmbeddedPersistentVolumeClaimApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("EmbeddedPodSpec"):
		return &vaultv1alpha1.EmbeddedPodSpecApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("GoogleUnsealConfig"):
		return &vaultv1alpha1.GoogleUnsealConfigApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("HSMUnsealConfig"):
		return &vaultv1alpha1.HSMUnsealConfigApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("Ingress"):
		return &vaultv1alpha1.IngressApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("KubernetesUnsealConfig"):
		return &vaultv1alpha1.KubernetesUnsealConfigApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("Resources"):
		return &vaultv1alpha1.ResourcesApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("UnsealConfig"):
		return &vaultv1alpha1.UnsealConfigApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("UnsealOptions"):
		return &vaultv1alpha1.UnsealOptionsApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("Vault"):
		return &vaultv1alpha1.VaultApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("VaultSpec"):
		return &vaultv1alpha1.VaultSpecApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("VaultStatus"):
		return &vaultv1alpha1.VaultStatusApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("VaultUnsealConfig"):
		return &vaultv1alpha1.VaultUnsealConfigApplyConfiguration{}

	}
	return nil
}
